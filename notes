Table naming conventions beef:

I believe I tried to talk aobut this once before, btu didn't convey it very
successfully, so here's try 2.0. Relational tables are being given the names of just one of their parties.
For instance, the table 'agents' contains the relationship between
agent_ids and work_ids. I see a few problems with this:
a) it's a misnomer (the table doesn't simply contain agents or even items
    which are strictly properties of agents),
b) suggest a false prioritization of agents (in this relational table, both
    agents and works have equal weight, no?)
c) will pose problems if we have later relational tables for agents -- for
    instance, consider aliases. If we have a table with two columns:
    agent_id and alias_id (or even just alias), what's the logic to say
    this table shouldn't ALSO be named agents (it obviously can't be)

Lets pin down some naming conventions. Obviously, the naming constructs
themselves aren't important so much as the fact that we stay consistent
with them (and that they don't potentially impede us in the future, as I
believe the current conventions would). The following is my suggestion.

-Tables listing one-to-one properties of an object are named with the plural
or singular of that object (so an Agent model is loaded from agent or
agents)

-Relational tables (either one to many, many to one, or one-to-one)
are named singular_singular: i.e. agent_work. I know there are some
naming conventions that use singular and plural to indicate the
many-ness of one side of a relationship or another, but I don't think
we care.

Our db ought then to look something like this:

agent table (agent_id, name, birth_date, etc.)
work table (work_id, title, publication_date, etc.)

alias table (alias_id,alias)
agent_alias table (agent_id,alias_id)

# I think the previous two can be combined just into agent_alias
# (agent_id,alias) but it's not immediately clear to me how this
# happens with SQLAlchemy (still needs to be a table apart from 
# agent because agent->alias = one->many)

LCSH table(LCSH_id,subject_heading)
LCSH_work table(LCSH_id,work_id) #Not 'headings!' consisssteeency

# even though this is once again a roughly parallel situation to
# agent_alias (agent:alias::work:lcsh::one:many), I believe it's
# helpful here to keep this separated into two tables, because it WILL
# be a common query to look for works with identical LCSH's -- it WON'T
# be a common query to look for agents with identical aliases.

token table (token_id,toke)
work_token table (work_id,token_id)

I am going to branch this and try and set it up in order to convince
you (or at least get it to a place where you don't give a shit because
it's working)
